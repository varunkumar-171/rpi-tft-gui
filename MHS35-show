#!/bin/bash

sudo ./system_backup.sh

if [ -f /etc/X11/xorg.conf.d/40-libinput.conf ]; then
sudo rm -rf /etc/X11/xorg.conf.d/40-libinput.conf
fi
if [ ! -d /etc/X11/xorg.conf.d ]; then
sudo mkdir -p /etc/X11/xorg.conf.d
fi

sudo cp -rf ./usr/99-calibration.conf-mhs35-90  /etc/X11/xorg.conf.d/99-calibration.conf
if [[ "$deb_version" < "12.1" ]]; then
echo "Copying 99-fbturbo"
sudo cp -rf ./usr/99-fbturbo.conf  /usr/share/X11/xorg.conf.d/99-fbturbo.conf
fi


sudo cp ./usr/mhs35-overlay.dtb /boot/overlays/
sudo cp ./usr/mhs35-overlay.dtb /boot/overlays/mhs35.dtbo # copy the display overlay files

source ./system_config.sh
sudo echo "hdmi_force_hotplug=1" >> ./boot/config.txt.bak
sudo echo "dtparam=spi=on" >> ./boot/config.txt.bak
sudo echo "dtoverlay=mhs35:rotate=90" >> ./boot/config.txt.bak
sudo echo "hdmi_group = 2" >> ./boot/config.txt.bak # HDMI DMT mode used for monitors
sudo echo "hdmi_mode = 87" >> ./boot/config.txt.bak # Custom DMT mode for the small display set using the following command
sudo echo "hdmi_cvt = 480 320 60 6 0 0 0" >> ./boot/config.txt.bak # coordinated video timings
                                                                 # <width> <height> <framerate> <aspect> <margins> <interlace> <rb>
sudo echo "hdmi_drive = 2" >> ./boot/config.txt.bak # normal HDMI mode with sound
sudo cp -rf ./boot/config.txt.bak /boot/config.txt

nodeplatform=`uname -n`
version=`uname -v`

if test "$nodeplatform" = "raspberrypi"
   then
      echo "this is raspberrypi kernel"
      version=${version%% *}
      version=${version#*#}
      echo $version
      if test $version -lt 970
         then
            echo "reboot"
         else
            echo "need to update touch configuration"
            sudo apt-get install xserver-xorg-input-evdev
            sudo cp -rf /usr/share/X11/xorg.conf.d/10-evdev.conf /usr/share/X11/xorg.conf.d/45-evdev.conf
            echo "reboot"
      fi
   else
      echo "this is not raspberrypi kernel, no need to update touch configure, reboot"
fi


# Install cmake and other build tool dependencies for fbcp

if [[ "$deb_version" < "12.10" ]]; then
sudo apt-get update
fi
#FBCP install
wget --spider -q -o /dev/null --tries=1 -T 10 https://cmake.org/
if [ $? -eq 0 ]; then
#sudo apt-get update
sudo apt-get install cmake libraspberrypi-dev -y 2> error_output.txt # need to find a workaround as it removes the raspi-config utility
result=`cat ./error_output.txt`
echo -e "\033[31m$result\033[0m"
grep -q "^E:" ./error_output.txt
type cmake > /dev/null 2>&1
if [ $? -eq 0 ]; then
sudo rm -rf rpi-fbcp
wget --spider -q -o /dev/null --tries=1 -T 10 https://github.com
if [ $? -eq 0 ]; then
sudo git clone https://github.com/tasanakorn/rpi-fbcp  # tries to clone from repo
if [ $? -ne 0 ]; then
echo "download fbcp failed, copy native fbcp!!!"
sudo cp -r ./usr/rpi-fbcp .
fi
else
echo "bad network, copy native fbcp!!!"
sudo cp -r ./usr/rpi-fbcp .
fi
sudo mkdir ./rpi-fbcp/build
cd ./rpi-fbcp/build/
sudo cmake ..
sudo make  # build fbcp application
sudo install fbcp /usr/local/bin/fbcp
cd - > /dev/null
type fbcp > /dev/null 2>&1
if [ $? -eq 0 ]; then
if [[ "$deb_version" < "12.1" ]]; then
sudo cp -rf ./usr/99-fbturbo-fbcp.conf  /usr/share/X11/xorg.conf.d/99-fbturbo.conf # copies fbcp conf file
fi
sudo cp -rf ./etc/rc.local /etc/rc.local # Enables the fbcp in the rc.local file
fi
else
echo "install cmake error!!!!"
fi
else
echo "bad network, can't install cmake!!!"
fi

sudo sync
sudo sync
sleep 1

echo "Reboot now..................."
sudo reboot
